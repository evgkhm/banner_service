// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/deps.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "banner_service/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// CreateBanner mocks base method.
func (m *Mockrepository) CreateBanner(ctx context.Context, banner *entity.Banner) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", ctx, banner)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockrepositoryMockRecorder) CreateBanner(ctx, banner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*Mockrepository)(nil).CreateBanner), ctx, banner)
}

// DeleteBanner mocks base method.
func (m *Mockrepository) DeleteBanner(ctx context.Context, bannerID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBanner", ctx, bannerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBanner indicates an expected call of DeleteBanner.
func (mr *MockrepositoryMockRecorder) DeleteBanner(ctx, bannerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBanner", reflect.TypeOf((*Mockrepository)(nil).DeleteBanner), ctx, bannerID)
}

// GetBanners mocks base method.
func (m *Mockrepository) GetBanners(ctx context.Context, tagID, featureID, limit, offset uint64) ([]entity.BannersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanners", ctx, tagID, featureID, limit, offset)
	ret0, _ := ret[0].([]entity.BannersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanners indicates an expected call of GetBanners.
func (mr *MockrepositoryMockRecorder) GetBanners(ctx, tagID, featureID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanners", reflect.TypeOf((*Mockrepository)(nil).GetBanners), ctx, tagID, featureID, limit, offset)
}

// GetUserBanner mocks base method.
func (m *Mockrepository) GetUserBanner(ctx context.Context, tagID, featureID uint64) (entity.Content, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBanner", ctx, tagID, featureID)
	ret0, _ := ret[0].(entity.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBanner indicates an expected call of GetUserBanner.
func (mr *MockrepositoryMockRecorder) GetUserBanner(ctx, tagID, featureID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBanner", reflect.TypeOf((*Mockrepository)(nil).GetUserBanner), ctx, tagID, featureID)
}

// UpdateBanner mocks base method.
func (m *Mockrepository) UpdateBanner(ctx context.Context, bannerID uint64, banner *entity.Banner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBanner", ctx, bannerID, banner)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBanner indicates an expected call of UpdateBanner.
func (mr *MockrepositoryMockRecorder) UpdateBanner(ctx, bannerID, banner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*Mockrepository)(nil).UpdateBanner), ctx, bannerID, banner)
}
